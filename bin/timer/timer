#!/usr/bin/env bash

version=0.1.3

# https://vitux.com/how-to-set-timers-alarms-and-stop-watches-in-ubuntu/

# HELPER FUNCTIONS =============================================================
# Auxiliary --------------------------------------------------------------------
usage() {
  _bd=`tput bold`
  _ul=`tput smul`
  _rg=`tput sgr0`
  cat << EOF
timer -- a pomodoro/interval timer

Usage: timer [options] [${_ul}minutes${_rg} ...]

    -r ${_ul}rounds${_rg}                        Repeat timer (n < 0 repeats forever)
    -d ${_ul}seconds${_rg}                       Delay timer start
    -q                               Suppress command line output
    -m ${_ul}message${_rg}           Notification with message
    -h                               Display this message
    -v                               Display version information

Timer duration may be specified in fraction or decimal form;
e.g., 90 seconds may be specified as ${_bd}1.5${_rg} or ${_bd}3/2${_rg}. If multiple
durations are specified, an alert will be triggered at the
end of each interval.

EOF
}

# Arguments: 1) input; 2) regexp for valid input; 3) error msg
catch_bad_input() {
  if ! [[ $1 =~ $2 ]]; then
    echo "timer: $1: $3" 1>&2
    exit 1
  fi
}

# Audio ------------------------------------------------------------------------
ring() {
  local bell="bell_$1"

  if system_muted; then
    printf "\a"
  else
    eval paplay "$(dirname "$0")/bing.wav"
  fi
}

system_muted() {
  [ -z "$operating_system" ] && operating_system="$(uname -s)"

  if [ "$operating_system" == "Linux" ]; then
    # TODO: investigate ways this could go wrong
    (pactl list sinks 2>/dev/null | grep -i "mute: yes" >/dev/null 2>&1) ||
      (amixer get Master 2>/dev/null | grep off >/dev/null 2>&1)
  elif  [ "$operating_system" == "Darwin" ]; then
    [ "$(osascript -e 'output muted of (get volume settings)')" = 'true' ]
  fi
}

# Display ----------------------------------------------------------------------
cleanup() {
  if [ -n "$TMUX" ]; then
    # reset tmux session name
    tmux rename -t "*$session_upcase" "$session"
  else
    # reset window title
    printf "\033]0;\007"
  fi

  # if in fg, clear command line
  case $(ps -o stat= -p $$) in
    *+*)
      if [ "$mode" != "quiet" ]; then
        printf "\r\e[K"
      fi
    ;;
  esac
}

rename_tmux_session() {
  if [ -n "$TMUX" ] && [ "$session" != "$session_upcase" ]; then
    tmux rename -t "$session" "$session_upcase"
  fi
}

# Takes one argument ()
update_display() {
  local countdown_text=$1

  # tmux UI: write remaining time to session name
  if [ -n "$TMUX" ]; then
    tmux rename -t "*$session_upcase" \
                   "$countdown_text $session_upcase"
  # Bare UI: write remaining time to window title
  else
    printf "\033]0;$countdown_text\007"
  fi

  # In foreground: write remaining time to command line
  if [ "$mode" != "quiet" ]; then
    case $(ps -o stat= -p $$) in
      *+*) printf "$countdown_text" ;;
    esac
  fi
}

format_countdown() {
  local time_left=$1
  local hours=$(($time_left/3600))
  local minutes=$((($time_left/60)%60))
  local seconds=$(($time_left%60))
  printf "\r%02dh%02dm%02ds" $hours $minutes $seconds
}

print_completion_message() {
  # ...but only if running in foreground
  case $(ps -o stat= -p $$) in
    *+*) printf "\r\e[K"
        notify-send Timer "[$(date +%H:%M)] Time expired" &
        echo "[$(date +%H:%M)] Time expired";; 
  esac
}

# Timing -----------------------------------------------------------------------
# Argument 1: length of delay (in seconds)
run_delay() {
  if ! [ -z $1 ]; then
    run_interval $1
  fi
}

# Argument 1: total number of sets
run_n_sets() {
  local set_count=$1

  # For each set (or endlessly, if $set_count < 0)
  while [ $set_count -ne 0 ]; do
    run_set "${intervals[@]}"
    set_count=$(( $set_count - 1 ))
  done
}

run_set() {
  local intervals_remaining=${#intervals[@]}

  for length in ${intervals[@]}; do
    intervals_remaining=$(($intervals_remaining - 1))
    [ $intervals_remaining -eq 0 ] && local type="set" || local type="interval"
    run_interval $length $type
  done
}

# Argument 1: length of interval (in seconds)
# Argument 2: type of bell to ring (default: interval)
run_interval() {
  local end_time=$(($next_interval_start_time + $1))
  local time_left=$(($end_time - $(date +%s)))
  local bell=${2-interval}
  next_interval_start_time=$end_time

  while [ $time_left -gt 0 ]; do
    update_display $(format_countdown $time_left)
    sleep 1
    time_left=$(($end_time - $(date +%s)))
  done

  # Skip intervals that accumulated e.g. while system suspended
  if [ $time_left -ne 0 ]; then
    return 1
  fi

  ring $bell
}

# PROGRAM LOGIC ================================================================
# Parse options ----------------------------------------------------------------
while getopts ":qvhmr:d:" opt; do
  case $opt in
    h) mode="help"; break ;;
    v) mode="version"; break ;;
    q) mode="quiet" ;;
    m) 
      mode="message" 
      message=$OPTARG
      ;;
    r)
      catch_bad_input $OPTARG '^-?[0-9]+$' 'not an integer'
      sets=$OPTARG
      ;;
    d)
      catch_bad_input $OPTARG '^[0-9]+$' 'not a whole number'
      delay=$OPTARG
      ;;
  esac
done

shift $(($OPTIND - 1))

case $mode in
  help)
    usage
    exit
    ;;
  version)
    echo "timer $version"
    exit
    ;;
esac

# Initialize variables ---------------------------------------------------------
# How many sets?
[ -z $sets ] && sets=1

# What arrangement of intervals?
for duration in "$@"; do
  # catch_bad_input $duration '[0-9]+([.][0-9]+)?' 'not a number'
  intervals+=("$(printf %.0f $(echo "(($duration) * 60)" | bc -l))")
done

next_interval_start_time=$(date +%s)

if [ -n "$TMUX" ]; then
  session=$(tmux display -p '#S')
  session_upcase=$(echo "$session" | tr '[:lower:]' '[:upper:]')
fi
# Main program logic -----------------------------------------------------------

trap cleanup EXIT      # In case of interrupt
rename_tmux_session
run_delay $delay
run_n_sets $sets
print_completion_message
